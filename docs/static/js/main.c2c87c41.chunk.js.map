{"version":3,"sources":["App.tsx","reportWebVitals.js","index.tsx"],"names":["LineItem","children","Box","display","justifyContent","p","ControlledSelect","field","label","options","name","defaultValue","rules","required","render","error","fieldState","FormControl","fullWidth","InputLabel","Select","value","onChange","e","target","map","opt","MenuItem","FormHelperText","message","ControlledInput","TextField","InputLabelProps","shrink","type","variant","helperText","App","methods","useForm","defaultValues","age","asa_score","gender","preop_emoglobin","surgical_indication","treated_hta","useState","score","setScore","doBloodDraw","resultLabel","Fragment","CssBaseline","AppBar","position","Toolbar","Typography","component","sx","flexGrow","noValidate","onSubmit","handleSubmit","data","roundedScore","Math","round","Container","maxWidth","mb","Paper","my","xs","md","Button","color","onClick","reset","flexDirection","gap","InputProps","readOnly","Alert","severity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c2c87c41.chunk.js","sourcesContent":["import {\n  Alert,\n  AppBar,\n  Box,\n  Button,\n  Container,\n  CssBaseline,\n  FormControl,\n  FormHelperText,\n  InputLabel,\n  MenuItem,\n  Paper,\n  Select,\n  TextField,\n  Toolbar,\n  Typography,\n} from \"@mui/material\";\nimport React, { useState } from \"react\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\n\nconst LineItem: React.FC = ({ children }) => {\n  return (\n    <Box display=\"flex\" justifyContent=\"space-between\" p={1}>\n      {children}\n    </Box>\n  );\n};\n\ntype FormValues = {\n  age: number;\n  gender: number;\n  surgical_indication: number;\n  asa_score: number;\n  treated_hta: number;\n  preop_emoglobin: number;\n};\n\nconst ControlledSelect: React.FC<{\n  field: keyof FormValues;\n  label: string;\n  options: { label: string; value: any }[];\n}> = ({ field, label, options }) => {\n  return (\n    <Controller\n      name={field}\n      defaultValue={\"\"}\n      rules={{ required: true }}\n      render={({ field, fieldState: { error } }) => (\n        <LineItem>\n          <FormControl fullWidth error={!!error}>\n            <InputLabel>{label}</InputLabel>\n            <Select\n              value={field.value}\n              onChange={(e) => field.onChange(e.target.value)}\n              label={label}\n            >\n              {options.map((opt) => {\n                return (\n                  <MenuItem key={opt.value} value={opt.value}>\n                    {opt.label}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n            {!!error ? <FormHelperText>{error?.message}</FormHelperText> : null}\n          </FormControl>\n        </LineItem>\n      )}\n    />\n  );\n};\n\nconst ControlledInput: React.FC<{\n  field: keyof FormValues;\n  label: string;\n}> = ({ field, label }) => {\n  return (\n    <Controller\n      name={field}\n      defaultValue={\"\"}\n      rules={{ required: true }}\n      render={({ field, fieldState: { error } }) => (\n        <LineItem>\n          <TextField\n            fullWidth\n            InputLabelProps={{ shrink: true }}\n            label={label}\n            type=\"number\"\n            variant=\"outlined\"\n            value={field.value}\n            onChange={(e) => field.onChange(e.target.value)}\n            error={!!error}\n            helperText={error?.message}\n          />\n        </LineItem>\n      )}\n    />\n  );\n};\n\nfunction App() {\n  const methods = useForm<FormValues>({\n    defaultValues: {\n      age: \"\",\n      asa_score: \"\",\n      gender: \"\",\n      preop_emoglobin: \"\",\n      surgical_indication: \"\",\n      treated_hta: \"\",\n    } as any,\n  });\n  const [score, setScore] = useState<number | null>(null);\n  const onSubmit = (data: FormValues) => {\n    const score =\n      2.503 +\n      0.0506 * data.age -\n      2.896 * data.gender +\n      2.976 * data.surgical_indication +\n      0.733 * data.asa_score +\n      0.771 * data.treated_hta -\n      0.97 * data.preop_emoglobin;\n    const roundedScore = Math.round(score * 10000) / 10000;\n    setScore(roundedScore);\n  };\n  const reset = () => {\n    methods.reset();\n    setScore(null);\n  };\n\n  const doBloodDraw = !!score && score > -4.5676;\n  const resultLabel = doBloodDraw\n    ? `Post-operative blood test NECESSARY`\n    : `Post-operative blood test NOT NECESSARY`;\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n            THABUS\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <FormProvider {...methods}>\n        <form noValidate onSubmit={methods.handleSubmit(onSubmit)}>\n          <Container component=\"main\" maxWidth=\"sm\" sx={{ mb: 4 }}>\n            <Paper\n              variant=\"outlined\"\n              sx={{ my: { xs: 3, md: 6 }, p: { xs: 2, md: 3 } }}\n            >\n              <ControlledInput field=\"age\" label=\"Age\" />\n              <ControlledSelect\n                field=\"gender\"\n                label=\"Gender\"\n                options={[\n                  { label: \"Male\", value: 1 },\n                  { label: \"Female\", value: 0 },\n                ]}\n              />\n              <ControlledSelect\n                field=\"surgical_indication\"\n                label=\"Surgical Indication\"\n                options={[\n                  { label: \"Osteonecrosis\", value: 1 },\n                  { label: \"Arthritis\", value: 0 },\n                ]}\n              />\n              <ControlledSelect\n                field=\"asa_score\"\n                label=\"ASA Score\"\n                options={[\n                  { label: \"1\", value: 1 },\n                  { label: \"2\", value: 2 },\n                  { label: \"3\", value: 3 },\n                  { label: \"4\", value: 4 },\n                ]}\n              />\n              <ControlledSelect\n                field=\"treated_hta\"\n                label=\"HTA\"\n                options={[\n                  { label: \"Yes\", value: 1 },\n                  { label: \"No\", value: 0 },\n                ]}\n              />\n              <ControlledInput\n                field=\"preop_emoglobin\"\n                label=\"Preop hemoglobin (g/dl)\"\n              />\n              <LineItem>\n                <Button type=\"submit\" variant=\"contained\">\n                  Calculate Score\n                </Button>\n                <Button color=\"error\" onClick={reset} variant=\"contained\">\n                  Reset\n                </Button>\n              </LineItem>\n              <LineItem>\n                {!!score ? (\n                  <Box display=\"flex\" flexDirection=\"column\"  gap={'8px'}>\n                    <TextField\n                      label=\"Score\"\n                      variant=\"outlined\"\n                      value={score}\n                      InputProps={{readOnly:true}}\n                    />\n                    <Alert severity={doBloodDraw ? \"error\":\"success\"}>\n                      <Typography variant=\"h5\" component=\"h5\">\n                        {resultLabel}\n                      </Typography>\n                    </Alert>\n                  </Box>\n                ) : null}\n              </LineItem>\n            </Paper>\n          </Container>\n        </form>\n      </FormProvider>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './App.css';\n\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n</React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}